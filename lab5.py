# -*- coding: utf-8 -*-
"""01_19301009_Md. ArifinAhmedRafi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y-w5rBvJH4NJTfGSLboXw5uGrojL8mba
"""

import sklearn
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
import seaborn as sns
from sklearn import datasets

melanoma = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Melanoma TFRecords 256x256.csv')
melanoma.head(3)

melanoma.shape

#print(melanoma)
print(melanoma.isnull().sum())

"""melanoma = melanoma.drop(['image_name', 'patient_id'], axis=1)
melanoma.head()
"""

melanoma = melanoma.drop(['patient_id', 'image_name'], axis=1)
melanoma.head(3)

print(melanoma.isnull().sum())

melanoma['sex'] = melanoma['sex'].map({'male':1,'female':0})
melanoma['sex']

from sklearn.impute import SimpleImputer

impute = SimpleImputer(missing_values=np.nan, strategy='mean')

impute.fit(melanoma[['age_approx']])

melanoma['age_approx'] = impute.transform(melanoma[['age_approx']])
print(melanoma['age_approx'])

from sklearn.impute import SimpleImputer

impute = SimpleImputer(missing_values=np.nan, strategy='mean')

impute.fit(melanoma[['sex']])

melanoma['sex'] = impute.transform(melanoma[['sex']])
print(melanoma['sex'])

melanoma['anatom_site_general_challenge'].unique()

melanoma['anatom_site_general_challenge'] = melanoma['anatom_site_general_challenge'].map({'head/neck':1, 'upper extremity':2, 'lower extremity':3, 'torso':4,'palms/soles':5, 'oral/genital':6})
melanoma['anatom_site_general_challenge']

from sklearn.impute import SimpleImputer

impute = SimpleImputer(missing_values=np.nan, strategy='mean')

impute.fit(melanoma[['anatom_site_general_challenge']])

melanoma['anatom_site_general_challenge'] = impute.transform(melanoma[['anatom_site_general_challenge']])
print(melanoma['anatom_site_general_challenge'])

melanoma['benign_malignant'].unique()

melanoma['benign_malignant'] = melanoma['benign_malignant'].map({'benign':1,'malignant':0})
melanoma['benign_malignant']

print(melanoma.isnull().sum())

melanoma['diagnosis'].unique()

melanoma['diagnosis'] = melanoma['diagnosis'].map({'unknown':0, 'nevus':1, 'melanoma':2, 'seborrheic keratosis':3,
       'lentigo NOS':4, 'lichenoid keratosis':5, 'solar lentigo':6,
       'cafe-au-lait macule':7, 'atypical melanocytic proliferation':8})
melanoma['diagnosis']

melanoma['diagnosis'].unique()

melanoma.head()

melanoma['patient_code'].unique()

melanoma = melanoma.drop(['patient_code'], axis=1)
melanoma.head()

test = melanoma.copy()
test=test.drop(['benign_malignant'], axis=1)
test=test.drop(['target'], axis=1)
test.head()

x = melanoma.iloc[:, :-1]
y = melanoma.iloc[:, -1]

#Linear Regression
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=.20, random_state=1)

from sklearn.linear_model import LinearRegression
clfe = LinearRegression()
clfe.fit(X_train, y_train)
y_pred = clfe.predict(X_test)
y_pred

X_train.shape
y_train.shape

clfe.score(X_test, y_test)

#Logisitic Regression

import seaborn as sns
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

from sklearn import preprocessing
from sklearn import utils

model = LogisticRegression()
lab = preprocessing.LabelEncoder()

model.fit(X_train, y_train) #Training the model
predictions = model.predict(X_test)
print(predictions)

print(predictions)
y_pred = model.predict(X_test)
score1=accuracy_score(y_pred,y_test)
print(score1)

#Decision Tree

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

clf = DecisionTreeClassifier(criterion='entropy',random_state=1)
clf.fit(X_train,y_train)
y_pred = clf.predict(X_test)

score2=accuracy_score(y_pred,y_test)
print(score2)

#Plotting the Scores

data_dict = {'Linear Regression':score, 'Logistic Regression':score1 , 'Decision tree': score2}
models = list(data_dict.keys())
scores = list(data_dict.values())
plt.bar(models, scores, color = 'green', width = 0.5)
plt.xlabel("Model")
plt.ylabel("Accuracy")
plt.title("Melanoma Dataset")